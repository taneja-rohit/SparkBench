package src.main.scala

import com.google.common.io.{ByteStreams, Files}
import java.io.File
import org.apache.spark.{SparkConf, SparkContext}
import org.apache.spark.sql._
import org.apache.spark.sql.hive.HiveContext
import org.apache.log4j.Logger
import org.apache.log4j.Level

object HiveFromSpark {
//case class Order(oid: Int,bid: Int, cts: String)
  case class Record(key: Int, value: Int, ts:String)
  case class OItem(iid: Int, oid: Int, gid: Int , gnum: Double, price: Double, gstore: Double)

  // Copy kv1.txt file from classpath to temporary directory
  //val kv1Stream = HiveFromSpark.getClass.getResourceAsStream("/kv1.txt")
  //val kv1File = File.createTempFile("kv1", "txt")
  //kv1File.deleteOnExit()
  //ByteStreams.copy(kv1Stream, Files.newOutputStreamSupplier(kv1File))

  def main(args: Array[String]) {
  
    if (args.length < 2) {
      println("usage:  <output> <upper bound>  ")
      System.exit(0)
    }
    Logger.getLogger("org.apache.spark").setLevel(Level.WARN)
    Logger.getLogger("org.eclipse.jetty.server").setLevel(Level.OFF)
	Logger.getLogger("org.apache.hadoop.hive").setLevel(Level.WARN)
	val inputPath = args(0)
	val output = args(1)
    //val upper = args(1).toInt
    
	val sparkConf = new SparkConf().setAppName("HiveFromSpark")
    val sc = new SparkContext(sparkConf)
	
	// A hive context adds support for finding tables in the MetaStore and writing queries
    // using HiveQL. Users who do not have an existing Hive deployment can still create a
    // HiveContext. When not configured by the hive-site.xml, the context automatically
    // creates metastore_db and warehouse in the current directory.
    val hiveContext = new HiveContext(sc)
    import hiveContext._

    //sql("CREATE TABLE IF NOT EXISTS src (key INT, value STRING)")
	//sql("CREATE TABLE IF NOT EXISTS src (key INT, value STRING)")
    //sql(s"LOAD DATA LOCAL INPATH '${kv1File.getAbsolutePath}' INTO TABLE src")

    var cnt=0;
    
     val upper=100;
    // You can also register RDDs as temporary tables within a HiveContext.
    //val rdd = sc.parallelize((1 to upper).map(i => Record(i, s"val_$i")))

	val rdd = sc.textFile(inputPath+"/OS_ORDER.txt").map{line => 
		val data=line.split("\\|")
		Record(data(0).toInt,data(1).toInt,data(2))
	}
    rdd.registerTempTable("records1")

	// You can also register RDDs as temporary tables within a HiveContext.
    //val rdd1 = sc.parallelize((1 to upper).map(i => Record(i,i, s"value_$i")))
    //rdd1.registerTempTable("records2")

	
	val oitemRdd = sc.textFile(inputPath+"/OS_ORDER_ITEM.txt").map{line => 
		val data=line.split("\\|")
		OItem(data(0).toInt,data(1).toDouble.toInt,data(2).toInt,data(3).toDouble,data(4).toDouble,data(5).toDouble)
	}
    oitemRdd.registerTempTable("records2")
	
	// Queries are expressed in HiveQL
    cnt=0;
	println("Result of 'SELECT *': ")
    sql("SELECT * FROM records2 where price>1000").collect().foreach(_=>cnt=cnt+1)
    println(s"COUNT(*): $cnt")
	
    // Aggregation queries are also supported.
    val count = sql("SELECT COUNT(*) FROM records1").collect().head.getLong(0)
    println(s"COUNT(*): $count")

	// Queries can then join RDD data with data stored in Hive.
    cnt=0;
	println("Result of SELECT *:")
    sql("SELECT * FROM records1 r JOIN records2 s ON r.key = s.oid").collect().foreach(_=>cnt=cnt+1)
	println(s"COUNT(*): $cnt")
	
	// The results of SQL queries are themselves RDDs and support all normal RDD functions.  The
    // items in the RDD are of type Row, which allows you to access each column by ordinal.
    val rddFromSql = sql("SELECT key, value FROM records1 WHERE key < 10 ORDER BY key")

    println("Result of RDD.map:")
	
    val rddAsStrings = rddFromSql.map {
      case Row(key: Int, value: String) => s"Key: $key, Value: $value"
    }
	
    sc.stop()
  }
}
/*
	sc.textFile(inputPath+"/OS_ORDER.txt").collect().foreach{line=>
		val data=line.split("\\|")
		println("data:"+data(0)+" "+data(1))
	
	}
*/